// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async openAboutWindow(): Promise<void> {
    await TAURI_INVOKE("open_about_window");
  },
  /**
   * Load a IP-Geolocation database into the program from the filename.
   */
  async loadDatabase(path: string): Promise<void> {
    await TAURI_INVOKE("load_database", { path });
  },
  /**
   * Unload the database, freeing up memory.
   */
  async unloadDatabase(path: string): Promise<Result<null, string>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("unload_database", { path }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async loadInternals(): Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("load_internals") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  /**
   * Retrieve the current state of the database.
   * This info is given out in [`DbStateChange`], but this is useful for getting it at page load, for example.
   */
  async databaseState(): Promise<DbStateInfo> {
    return await TAURI_INVOKE("database_state");
  },
  /**
   * Set the given database as the selected database for lookups.
   */
  async setSelectedDatabase(path: string): Promise<void> {
    await TAURI_INVOKE("set_selected_database", { path });
  },
  /**
   * Lookup a given IP address in the currently selected database(s).
   */
  async lookupIp(ip: string): Promise<LookupInfo | null> {
    return await TAURI_INVOKE("lookup_ip", { ip });
  },
  /**
   * Get a hostname with the system for a given IP address.
   */
  async lookupDns(ip: string): Promise<Result<string | null, null>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("lookup_dns", { ip }) };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  /**
   * Get a hostname with the system for a given IP address.
   */
  async lookupHost(host: string): Promise<Result<string | null, null>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("lookup_host", { host }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  /**
   * Attempt to get the user's current location
   */
  async myLocation(): Promise<Result<LookupInfo, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("my_location") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async initPcap(): Promise<Result<PcapStateInfo, Error>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("init_pcap") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async startCapture(
    params: RunCapture,
    conns: TAURI_CHANNEL<CaptureLocations>,
  ): Promise<Result<null, Error>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("start_capture", { params, conns }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  /**
   * Stop the current capture.
   */
  async stopCapture(): Promise<Result<null, Error>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("stop_capture") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async tracerouteEnabled(): Promise<Result<null, Error>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("traceroute_enabled") };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async runTraceroute(
    params: RunTraceroute,
    progress: TAURI_CHANNEL<number>,
  ): Promise<Result<Hop[], Error>> {
    try {
      return {
        status: "ok",
        data: await TAURI_INVOKE("run_traceroute", { params, progress }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: "error", error: e as any };
    }
  },
  async printError(error: Error): Promise<string> {
    return await TAURI_INVOKE("print_error", { error });
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  dbStateChange: DbStateChange;
  pcapStateChange: PcapStateChange;
}>({
  dbStateChange: "db-state-change",
  pcapStateChange: "pcap-state-change",
});

/** user-defined constants **/

export const APP_VERSION = "5.0.0" as const;
export const PCAP_ERROR_KINDS = [
  "UnexpectedType",
  "TerminatedUnexpectedly",
  "ChildTimeout",
  "Ipc",
  "InsufficientPermissions",
  "LibLoading",
  "Runtime",
  "ChildNotFound",
  "EstablishConnection",
  "Io",
] as const;
export const PLATFORM = "linux" as const;

/** user-defined types **/

/**
 * A location and it's associated active IPs and their connections.
 */
export type CaptureLocation = {
  ips: Partial<{ [key in string]: Connection }>;
  loc: Location;
  crd: Coordinate;
  dir: ConnectionDirection;
  thr: number;
};
export type CaptureLocations = {
  /**
   * The current state of locations and their connections.
   */
  updates: Partial<{ [key in string]: CaptureLocation }>;
  started: string[];
  ended: string[];
  /**
   * Connections that we couldn't find in the ip-geo database.
   */
  notFound: Partial<{ [key in string]: Connection }>;
  /**
   * A single Connection representing the entire capture session.
   */
  session: Connection;
  /**
   * The maximum connection throughput found.
   */
  maxThroughput: number;
  /**
   * Indicate to the client this is the last update in the session.
   */
  last: boolean;
};
export type Connection = { up: Throughput; down: Throughput };
export type ConnectionDirection = "mixed" | "up" | "down";
/**
 * A latitude/longitude coordinate.
 */
export type Coordinate = { lat: number; lng: number };
export type DbCollectionInfo = { loaded: DbInfo[]; selected: string | null };
export type DbInfo = { path: string; preloaded: boolean };
/**
 * Fired any time the state of loaded or selected databases are changed on the backend.
 */
export type DbStateChange = DbStateInfo;
export type DbStateInfo = {
  ipv4: DbCollectionInfo;
  ipv6: DbCollectionInfo;
  loading: string | null;
};
/**
 * A network device reported from libpcap, e.g. "wlp3s0".
 */
export type Device = {
  /**
   * Name, e.g. "wlp3s0"
   */
  name: string;
  /**
   * Note: for physical devices this is usually only on Windows.
   */
  description: string | null;
  /**
   * If the device is up and running.
   */
  ready: boolean;
  /**
   * If the device is a wireless device.
   */
  wireless: boolean;
};
export type Duration = { secs: number; nanos: number };
export type Error = { kind: ErrorKind; message: string | null };
export type ErrorKind =
  | "UnexpectedType"
  | "TerminatedUnexpectedly"
  | "ChildTimeout"
  | "Ipc"
  | "InsufficientPermissions"
  | "LibLoading"
  | "Runtime"
  | "ChildNotFound"
  | "EstablishConnection"
  | "Io";
export type Hop = { ips: string[]; loc: LookupInfo | null };
/**
 * Location metadata.
 */
export type Location = {
  city: string | null;
  region: string | null;
  countryCode: string;
};
export type LookupInfo = { crd: Coordinate; loc: Location };
export type PcapStateChange =
  | ({ status: "Ok" } & PcapStateInfo)
  | ({ status: "Err" } & Error);
export type PcapStateInfo = {
  /**
   * The version information about the currently loaded libpcap
   */
  version: string;
  /**
   * The list of available network devices for capture
   */
  devices: Device[];
  /**
   * The currently-captured on device, if any
   */
  capture: Device | null;
};
export type RunCapture = {
  device: Device;
  connectionTimeout: Duration;
  reportFrequency: Duration;
};
export type RunTraceroute = { ip: string; rounds: number };

/**
 * Current stats for a single connection direction (up or down)
 */
export type Throughput = {
  /**
   * Total number of bytes since the start of the capture session
   */
  total: number;
  /**
   * Number of bytes per second
   */
  avgS: number;
};

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
