
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Load a IP-Geolocation database into the program from the filename.
 */
async loadDatabase(path: string) : Promise<Result<DatabaseInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_database", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Unload the database, freeing up memory.
 */
async unloadDatabase(db: DatabaseInfo) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("unload_database", { db }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Retrieve the current state of the database.
 * This info is given out in [`DatabaseStateChange`], but this is useful for getting it at page load, for example.
 */
async databaseState() : Promise<GlobalDatabaseStateInfo> {
    return await TAURI_INVOKE("database_state");
},
/**
 * Set the given database as the selected database for lookups.
 */
async setSelectedDatabase(db: DatabaseInfo) : Promise<void> {
    await TAURI_INVOKE("set_selected_database", { db });
},
/**
 * Lookup a given IP address in the currently selected database(s).
 */
async lookupIp(ip: string) : Promise<[Coordinate, Location] | null> {
    return await TAURI_INVOKE("lookup_ip", { ip });
},
async pcapState() : Promise<GlobalPcapStateInfo> {
    return await TAURI_INVOKE("pcap_state");
},
async allConnections() : Promise<ConnectionInfo[] | null> {
    return await TAURI_INVOKE("all_connections");
},
async startCapture(device: Device) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("start_capture", { device }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopCapture() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_capture") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
activeConnections: ActiveConnections,
databaseStateChange: DatabaseStateChange,
pcapStateChange: PcapStateChange
}>({
activeConnections: "active-connections",
databaseStateChange: "database-state-change",
pcapStateChange: "pcap-state-change"
})

/** user-defined constants **/



/** user-defined types **/

/**
 * Fired any time the state of loaded or selected databases are changed on the backend.
 */
export type ActiveConnections = ConnectionInfo[]
export type ConnectionDirectionInfo = { count: number; size: number; size_since_update: number; bytes_per_second: number }
export type ConnectionInfo = { ip: string; in: ConnectionDirectionInfo; out: ConnectionDirectionInfo }
/**
 * A latitude/longitude coordinate.
 */
export type Coordinate = { lat: number; lng: number }
export type DatabaseInfo = { name: string; path: string }
/**
 * Fired any time the state of loaded or selected databases are changed on the backend.
 */
export type DatabaseStateChange = GlobalDatabaseStateInfo
export type DatabaseStateInfo = { selected: DatabaseInfo | null; loaded: DatabaseInfo[] }
/**
 * A network device that can be captured on
 */
export type Device = { name: string; description: string | null; ready: boolean; wireless: boolean }
export type GlobalDatabaseStateInfo = { ipv4: DatabaseStateInfo; ipv6: DatabaseStateInfo; loading: string | null }
export type GlobalPcapStateInfo = { Loaded: { version: string; devices: Device[]; capture: Device | null } } | { Unavailable: string }
/**
 * Location metadata.
 */
export type Location = { city: string | null; region: string | null; country_code: string }
/**
 * Fired any time the state of loaded or selected databases are changed on the backend.
 */
export type PcapStateChange = GlobalPcapStateInfo

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
